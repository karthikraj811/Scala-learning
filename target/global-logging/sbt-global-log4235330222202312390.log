[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\KarthikrajVairam\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\KarthikrajVairam\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.7 (Oracle Corporation Java 20.0.1)
[debug]       Load.loadUnit: plugins took 62.443ms
[debug]       Load.loadUnit: defsScala took 0.1792ms
[debug] [Loading] Scanning directory C:\Users\KarthikrajVairam\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\KarthikrajVairam\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 11.5654 ms
[debug]           Load.resolveProject(global-plugins) took 25.7355ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\KarthikrajVairam\.sbt\1.0\plugins, plugins: List(<none>))) took 50.2301ms
[debug] [Loading] Done in C:\Users\KarthikrajVairam\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 66.7236ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.1379ms
[debug]     Load.loadUnit(file:/C:/Users/KarthikrajVairam/.sbt/1.0/plugins/, ...) took 134.6878ms
[debug]   Load.apply: load took 273.7878ms
[debug]   Load.apply: resolveProjects took 5.9981ms
[debug]   Load.apply: finalTransforms took 52.9567ms
[debug]   Load.apply: config.delegates took 6.8227ms
[debug]   Load.apply: Def.make(settings)... took 392.2278ms
[debug]   Load.apply: structureIndex took 108.7933ms
[debug]   Load.apply: mkStreams took 2.4504ms
[info] loading global plugins from C:\Users\KarthikrajVairam\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3928.4612ms
[debug]           Load.loadUnit: plugins took 17.9142ms
[debug]           Load.loadUnit: defsScala took 0.003ms
[debug] [Loading] Scanning directory D:\scala-projects\Scala-basics1\project
[debug]             Load.loadUnit: mkEval took 8.0712ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\scala-projects\Scala-basics1\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 5.0466 ms
[info] loading settings for project scala-basics1-build from idea.sbt ...
[debug]               Load.resolveProject(scala-basics1-build) took 36.9959ms
[debug]             Load.loadTransitive: finalizeProject(Project(id scala-basics1-build, base: D:\scala-projects\Scala-basics1\project, plugins: List(<none>))) took 43.4598ms
[debug] [Loading] Done in D:\scala-projects\Scala-basics1\project, returning: (scala-basics1-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 5620.024ms
[debug]           Load.loadUnit: cleanEvalClasses took 10.6403ms
[debug]         Load.loadUnit(file:/D:/scala-projects/Scala-basics1/project/, ...) took 5649.6331ms
[debug]       Load.apply: load took 5652.0152ms
[debug]       Load.apply: resolveProjects took 0.3517ms
[debug]       Load.apply: finalTransforms took 31.5128ms
[debug]       Load.apply: config.delegates took 1.056ms
[debug]       Load.apply: Def.make(settings)... took 208.9816ms
[debug]       Load.apply: structureIndex took 84.0747ms
[debug]       Load.apply: mkStreams took 0.0057ms
[info] loading project definition from D:\scala-projects\Scala-basics1\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 10906.2466ms
[debug]     Load.loadUnit: defsScala took 0.0028ms
[debug] [Loading] Scanning directory D:\scala-projects\Scala-basics1
[debug]       Load.loadUnit: mkEval took 0.2707ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 6.3824 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 68.862ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: D:\scala-projects\Scala-basics1, plugins: List(<none>))) took 79.4546ms
[debug] [Loading] Done in D:\scala-projects\Scala-basics1, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 1739.1916ms
[debug]     Load.loadUnit: cleanEvalClasses took 36.9662ms
[debug]   Load.loadUnit(file:/D:/scala-projects/Scala-basics1/, ...) took 12683.8631ms
[debug] Load.apply: load took 12686.2615ms
[debug] Load.apply: resolveProjects took 0.235ms
[debug] Load.apply: finalTransforms took 60.2299ms
[debug] Load.apply: config.delegates took 0.7194ms
[debug] Load.apply: Def.make(settings)... took 147.8868ms
[debug] Load.apply: structureIndex took 60.8918ms
[debug] Load.apply: mkStreams took 0.0053ms
[info] set current project to Scala-basics1 (in build file:/D:/scala-projects/Scala-basics1/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 61390 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 61390, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Scala-basics1 (in build file:/D:/scala-projects/Scala-basics1/)
[debug] > Exec(idea-shell, None, None)
